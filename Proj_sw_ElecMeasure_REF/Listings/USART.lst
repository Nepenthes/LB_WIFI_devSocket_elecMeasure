C51 COMPILER V9.54   USART                                                                 09/07/2018 15:49:48 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Output\USART.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE std_Lib\USART.C OMF2 ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Pro
                    -j_sw_ElecMeasure;.\Usr;.\Usr_lib;.\std_Lib;.\hwDriver;.\dataTrans) DEBUG PRINT(.\Listings\USART.lst) OBJECT(.\Output\USA
                    -RT.obj)

line level    source

   1          #include "USART.h"
   2          #include "delay.h"
   3          
   4          /**********************本地文件变量创建区********************/
   5          //COMx_Define   COM1,COM2;
   6          //u8    xdata TX2_Buffer[COM_TX2_Lenth];        //发送缓冲
   7          //u8    xdata RX2_Buffer[COM_RX2_Lenth];        //接收缓冲
   8          
   9          COMx_Define     COM1;
  10          
  11          u8      xdata TX1_Buffer[COM_TX1_Lenth];        //发送缓冲
  12          u8      xdata RX1_Buffer[COM_RX1_Lenth];        //接收缓冲
  13          
  14          //u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  15          //{
  16          //      u8      i;
  17          //      u32     j;
  18          //      
  19          //      if(UARTx == USART1)
  20          //      {
  21          //              COM1.id = 1;
  22          //              COM1.TX_read    = 0;
  23          //              COM1.TX_write   = 0;
  24          //              COM1.B_TX_busy  = 0;
  25          //              COM1.RX_Cnt     = 0;
  26          //              COM1.RX_TimeOut = 0;
  27          //              COM1.B_RX_OK    = 0;
  28          //              for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  29          //              for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  30          
  31          //              if(COMx->UART_Mode > UART_9bit_BRTx)    return 2;       //模式错误
  32          //              if(COMx->UART_Polity == PolityHigh)             PS = 1; //高优先级中断
  33          //              else                                                                    PS = 0; //低优先级中断
  34          //              SCON = (SCON & 0x3f) | COMx->UART_Mode;
  35          //              if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx))   //可变波特率
  36          //              {
  37          //                      j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
  38          //                      if(j >= 65536UL)        return 2;       //错误
  39          //                      j = 65536UL - j;
  40          //                      if(COMx->UART_BRT_Use == BRT_Timer1)
  41          //                      {
  42          //                              TR1 = 0;
  43          //                              AUXR &= ~0x01;          //S1 BRT Use Timer1;
  44          //                              TMOD &= ~(1<<6);        //Timer1 set As Timer
  45          //                              TMOD &= ~0x30;          //Timer1_16bitAutoReload;
  46          //                              AUXR |=  (1<<6);        //Timer1 set as 1T mode
  47          //                              TH1 = (u8)(j>>8);
  48          //                              TL1 = (u8)j;
  49          //                              ET1 = 0;        //禁止中断
  50          //                              TMOD &= ~0x40;  //定时
  51          //                              INT_CLKO &= ~0x02;      //不输出时钟
  52          //                              TR1  = 1;
  53          //                      }
C51 COMPILER V9.54   USART                                                                 09/07/2018 15:49:48 PAGE 2   

  54          //                      else if(COMx->UART_BRT_Use == BRT_Timer2)
  55          //                      {
  56          //                              AUXR &= ~(1<<4);        //Timer stop
  57          //                              AUXR |= 0x01;           //S1 BRT Use Timer2;
  58          //                              AUXR &= ~(1<<3);        //Timer2 set As Timer
  59          //                              AUXR |=  (1<<2);        //Timer2 set as 1T mode
  60          //                              TH2 = (u8)(j>>8);
  61          //                              TL2 = (u8)j;
  62          //                              IE2  &= ~(1<<2);        //禁止中断
  63          //                              AUXR &= ~(1<<3);        //定时
  64          //                              AUXR |=  (1<<4);        //Timer run enable
  65          //                      }
  66          //                      else return 2;  //错误
  67          //              }
  68          //              else if(COMx->UART_Mode == UART_ShiftRight)
  69          //              {
  70          //                      if(COMx->BaudRateDouble == ENABLE)      AUXR |=  (1<<5);        //固定波特率SysClk/2
  71          //                      else                                                            AUXR &= ~(1<<5);        //固定波特率SysClk/12
  72          //              }
  73          //              else if(COMx->UART_Mode == UART_9bit)   //固定波特率SysClk*2^SMOD/64
  74          //              {
  75          //                      if(COMx->BaudRateDouble == ENABLE)      PCON |=  (1<<7);        //固定波特率SysClk/32
  76          //                      else                                                            PCON &= ~(1<<7);        //固定波特率SysClk/64
  77          //              }
  78          //              if(COMx->UART_Interrupt == ENABLE)      ES = 1; //允许中断
  79          //              else                                                            ES = 0; //禁止中断
  80          //              if(COMx->UART_RxEnable == ENABLE)       REN = 1;        //允许接收
  81          //              else                                                            REN = 0;        //禁止接收
  82          //              P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);      //切换IO
  83          //              if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4);       //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
  84          //              else                                                                    PCON2 &= ~(1<<4);
  85          //              return  0;
  86          //      }
  87          
  88          //      if(UARTx == USART2)
  89          //      {
  90          //              COM2.id = 2;
  91          //              COM2.TX_read    = 0;
  92          //              COM2.TX_write   = 0;
  93          //              COM2.B_TX_busy  = 0;
  94          //              COM2.RX_Cnt     = 0;
  95          //              COM2.RX_TimeOut = 0;
  96          //              COM2.B_RX_OK    = 0;
  97          //              for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
  98          //              for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
  99          
 100          //              if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx))   //可变波特率
 101          //              {
 102          //                      if(COMx->UART_Polity == PolityHigh)             IP2 |=  1;      //高优先级中断
 103          //                      else                                                                    IP2 &= ~1;      //低优先级中断
 104          //                      if(COMx->UART_Mode == UART_9bit_BRTx)   S2CON |=  (1<<7);       //9bit
 105          //                      else                                                                    S2CON &= ~(1<<7);       //8bit
 106          //                      j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
 107          //                      if(j >= 65536UL)        return 2;       //错误
 108          //                      j = 65536UL - j;
 109          //                      AUXR &= ~(1<<4);        //Timer stop
 110          //                      AUXR &= ~(1<<3);        //Timer2 set As Timer
 111          //                      AUXR |=  (1<<2);        //Timer2 set as 1T mode
 112          //                      TH2 = (u8)(j>>8);
 113          //                      TL2 = (u8)j;
 114          //                      IE2  &= ~(1<<2);        //禁止中断
 115          //                      AUXR |=  (1<<4);        //Timer run enable
C51 COMPILER V9.54   USART                                                                 09/07/2018 15:49:48 PAGE 3   

 116          //              }
 117          //              else    return 2;       //模式错误
 118          //              if(COMx->UART_Interrupt == ENABLE)      IE2   |=  1;            //允许中断
 119          //              else                                                            IE2   &= ~1;            //禁止中断
 120          //              if(COMx->UART_RxEnable == ENABLE)       S2CON |=  (1<<4);       //允许接收
 121          //              else                                                            S2CON &= ~(1<<4);       //禁止接收
 122          //              P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01);        //切换IO
 123          //      }
 124          //      
 125          //      return 3;
 126          //}
 127          
 128          
 129          /*************** 装载串口发送缓冲 *******************************/
 130          
 131          void TX1_write2buff(u8 dat)     //写入发送缓冲，指针+1
 132          {
 133   1              TX1_Buffer[COM1.TX_write] = dat;        //装发送缓冲
 134   1              if(++COM1.TX_write >= COM_TX1_Lenth)    COM1.TX_write = 0;
 135   1      
 136   1              if(COM1.B_TX_busy == 0)         //空闲
 137   1              {  
 138   2                      COM1.B_TX_busy = 1;             //标志忙
 139   2                      TI = 1;                                 //触发发送中断
 140   2              }
 141   1      }
 142          
 143          //void TX2_write2buff(u8 dat)   //写入发送缓冲，指针+1
 144          //{
 145          //      TX2_Buffer[COM2.TX_write] = dat;        //装发送缓冲
 146          //      if(++COM2.TX_write >= COM_TX2_Lenth)    COM2.TX_write = 0;
 147          
 148          //      if(COM2.B_TX_busy == 0)         //空闲
 149          //      {  
 150          //              COM2.B_TX_busy = 1;             //标志忙
 151          //              SET_TI2();                              //触发发送中断
 152          //      }
 153          //}
 154          
 155          void PrintString1(u8 *puts)
 156          {
 157   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);         //遇到停止符0结束
 158   1      }
 159          
 160          //void PrintString2(u8 *puts)
 161          //{
 162          //    for (; *puts != 0;        puts++)  TX2_write2buff(*puts);         //遇到停止符0结束
 163          //}
 164          
 165          void uart1_datsSend(u8 *dats,u8 datsLen){
 166   1      
 167   1              u8 loop = 0;
 168   1              
 169   1              for(loop = 0; loop < datsLen; loop ++){
 170   2              
 171   2                      TX1_write2buff(*dats ++);
 172   2              }
 173   1      }
 174          
 175          //void uart2_datsSend(u8 *dats,u8 datsLen){
 176          
 177          //      u8 loop = 0;
C51 COMPILER V9.54   USART                                                                 09/07/2018 15:49:48 PAGE 4   

 178          //      
 179          //      for(loop = 0; loop < datsLen; loop ++){
 180          //      
 181          //              TX2_write2buff(*dats ++);
 182          //      }
 183          //}
 184          
 185          /*
 186          void COMx_write2buff(COMx_Define *COMx, u8 dat) //写入发送缓冲，指针+1
 187          {
 188                  if(COMx->id == 1)       TX1_write2buff(dat);
 189                  if(COMx->id == 2)       TX2_write2buff(dat);
 190          }
 191          
 192          void PrintString(COMx_Define *COMx, u8 *puts)
 193          {
 194              for (; *puts != 0;  puts++)  COMx_write2buff(COMx,*puts);   //遇到停止符0结束
 195          }
 196          */
 197          
 198          
 199          ///********************* UART1中断函数************************/
 200          //void UART1_Rountine (void) interrupt UART1_VECTOR
 201          //{
 202          //      if(RI)
 203          //      {
 204          //              RI = 0;
 205          //              if(COM1.B_RX_OK == 0)
 206          //              {
 207          //                      if(COM1.RX_Cnt >= COM_RX1_Lenth)        COM1.RX_Cnt = 0;
 208          //                      RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 209          //                      COM1.RX_TimeOut = TimeOutSet1;
 210          //              }
 211          //      }
 212          
 213          //      if(TI)
 214          //      {
 215          //              TI = 0;
 216          //              if(COM1.TX_read != COM1.TX_write)
 217          //              {
 218          //                      SBUF = TX1_Buffer[COM1.TX_read];
 219          //                      if(++COM1.TX_read >= COM_TX1_Lenth)             COM1.TX_read = 0;
 220          //              }
 221          //              else    COM1.B_TX_busy = 0;
 222          //      }
 223          //}
 224          
 225          /********************* UART2中断函数************************/
 226          //void UART2_Rountine (void) interrupt UART2_VECTOR
 227          //{
 228          //      if(RI2)
 229          //      {
 230          //              CLR_RI2();
 231          //              if(COM2.B_RX_OK == 0)
 232          //              {
 233          //                      if(COM2.RX_Cnt >= COM_RX2_Lenth)        COM2.RX_Cnt = 0;
 234          //                      RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
 235          //                      COM2.RX_TimeOut = TimeOutSet2;
 236          //              }
 237          //      }
 238          //      
 239          
C51 COMPILER V9.54   USART                                                                 09/07/2018 15:49:48 PAGE 5   

 240          //      if(TI2)
 241          //      {
 242          //              CLR_TI2();
 243          //              if(COM2.TX_read != COM2.TX_write)
 244          //              {
 245          //                      S2BUF = TX2_Buffer[COM2.TX_read];
 246          //                      if(++COM2.TX_read >= COM_TX2_Lenth)             COM2.TX_read = 0;
 247          //              }
 248          //              else    COM2.B_TX_busy = 0;
 249          //      }
 250          //}
 251          
 252          
 253          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     92    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    192    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
